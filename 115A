        import java.util.*;

        public class Solution {
            static ArrayList <ArrayList <Integer>> graph= new ArrayList <ArrayList<Integer>>();
            
           // undirected graph
            public static void addEdge( ArrayList <ArrayList<Integer>> adj, int u, int v){
                adj.get(u).add(v);
            }
            
            public static void dfs(int root, int parent, int [] dp){
                dp[root]=1;
                int max=0;
                
                for(int child: graph.get(root)){
                    if(child==parent){
                        continue;
                    }
                    else{
                        dfs(child, root, dp);
                        max=Math.max(max, dp[child]);
                    }
                }
                
                dp[root]+=max;
            }
	        public static void main(String[] args) {
	            
                Scanner in = new Scanner(System.in);
        		      
        		      int n=in.nextInt();
        		      int [] dp= new int[n+1];
        		      
        		      for(int i=0; i<=n; i++){
        		          graph.add(new ArrayList <Integer>());
        		      }
        		      
        		      for(int i=1; i<=n; i++){
        		          int boss=in.nextInt();
        		          
        		          if(boss==-1){
        		              addEdge(graph, 0, i);
        		          }
        		          else{
        		              addEdge(graph, boss, i);
        		          }
        		      }
        	
        		in.close();
        		
        		dfs(0,0,dp);
        		System.out.println(dp[0]-1);
	        }
        }
	
	
	
	
	//////////////////////////////////////////////////////////////////////////
	
	1. The dp array is then initialized to store the minimum number of groups required to cover each employee in the company.
	
	2. The dfs function performs a depth-first search on the tree rooted at the given root node,
	   computes the minimum number of groups required to cover the subtree rooted at root, and stores it in the dp array.
	   
	3. By setting the value of "dp[root]" to 1, we are considering that the current node itself can form a group.
	
	4. The call "dfs(child, root, dp)" is a recursive function call to the "dfs" function. 
	   This call is made for the "child" node which is a neighbor of the "root" node in the graph.
	   In this call, the "child" node becomes the new "root" node and "root" becomes the parent of the "child" node. 
